#!/usr/bin/python

class Statistics():
    '''Class that receives a list and gives its mean and stdev and maybe sometime, confidenceinterval'''

    def loadFile(self, filename, confidenceInterval = 95):
        fileObject = file(filename,"r")
        line = fileObject.readline()
        dependentVariable = len(line.split())-1
        variables = {}
        while len(line) != 0:
            line = line.split()
            #verify if the X value is in the dict
            if(variables.has_key(float(line[0])) == 0):
                variables[float(line[0])] = []
                for iterator in range(0,dependentVariable):
                    variables[float(line[0])].append([])
            for iterator in range(0,dependentVariable):
                listObject = variables[float(line[0])]
                listObject[iterator].append(float(line[iterator+1]))
                variables[float(line[0])] = listObject
            line = fileObject.readline()
       # print variables
        fileObject.close()

        independentVariables = variables.keys()
        independentVariables.sort()

        outputFile = file(filename + "_output", "w")
        for independentVariable in independentVariables:
            output = str(independentVariable) + "\t"
            for variable in variables[independentVariable]:
                output += str(self.getMean(variable))
                output += "\t"
                if(len(variable) == 1):
                    output += "0"
                else:
                    output += str(self.getConfidenceInterval(variable, confidenceInterval))
                output += "\t"
            output += "\n"
            outputFile.write(output)
            #print variables[independentVariable]
        outputFile.close()
        #print independentVariables

    def getMean(self, numberList):
        '''Calculate the mean of all values inside a list'''
        floatNums = [float(x) for x in numberList]
        return sum(floatNums) / (len(numberList)*(1.0))



    def getStdev(self, numberList):
        '''Calculate the standard deviation from all values inside a list'''

        #calculate the average of the list
        mean = self.getMean(numberList)
        desviation = []

        for sample in numberList:
            desviation.append(abs(float(sample) - mean)**2.0)
        if len(desviation)==1:
            return 0
        stDev = (sum (desviation) / (len(desviation)-1))**(0.5)
        return stDev



    def getConfidenceInterval(self, numberList, interval =95):
        ret = self.__getNormalGaussianValue(interval) * \
            self.getStdev(numberList)/(len(numberList))**(0.5)
        return ret



    def getHistogram(self, numberList, granularity):
        '''Receives a list with all the values to be examined in order to get the values of the histogram.
        It also needs the granularity of the histogram intervals'''

        min_value = min(numberList)
        max_value = max(numberList)
        final_list_lenght = int((max_value - min_value)/granularity)
        final_list =[]
        for i in range (0,final_list_lenght+1):
            final_list.append(0)
        for element in numberList:
            k = int((element - min_value)/granularity)
            final_list[k]+=1
        return final_list



    def __getNormalGaussianValue (self, ic = 95):
        '''Returns the z value for a normal gussian where the percentage of
        samples defined in ic are inserted.'''

        normal = [ \
            [0.0, 0.0040000000000000001, 0.0080000000000000002, 0.012, 0.016, 0.019900000000000001, 0.023900000000000001, 0.027900000000000001, 0.031899999999999998, 0.035900000000000001], \
            [0.039800000000000002, 0.043799999999999999, 0.047800000000000002, 0.051700000000000003, 0.0557, 0.0596, 0.063600000000000004, 0.067500000000000004, 0.071400000000000005, 0.075300000000000006], \
            [0.079299999999999995, 0.083199999999999996, 0.087099999999999997, 0.090999999999999998, 0.094799999999999995, 0.098699999999999996, 0.1026, 0.10639999999999999, 0.1103, 0.11409999999999999], \
            [0.1179, 0.1217, 0.1255, 0.1293, 0.1331, 0.1368, 0.1406, 0.14430000000000001, 0.14799999999999999, 0.1517], \
            [0.15540000000000001, 0.15909999999999999, 0.1628, 0.16639999999999999, 0.17000000000000001, 0.1736, 0.1772, 0.18079999999999999, 0.18440000000000001, 0.18790000000000001], \
            [0.1915, 0.19500000000000001, 0.19850000000000001, 0.2019, 0.2054, 0.20880000000000001, 0.21229999999999999, 0.2157, 0.219, 0.22239999999999999], \
            [0.22570000000000001, 0.2291, 0.2324, 0.23569999999999999, 0.2389, 0.2422, 0.24540000000000001, 0.24859999999999999, 0.25169999999999998, 0.25490000000000002], \
            [0.25800000000000001, 0.2611, 0.26419999999999999, 0.26729999999999998, 0.27039999999999997, 0.27339999999999998, 0.27639999999999998, 0.27939999999999998, 0.2823, 0.28520000000000001], \
            [0.28810000000000002, 0.29099999999999998, 0.29389999999999999, 0.29670000000000002, 0.29949999999999999, 0.30230000000000001, 0.30509999999999998, 0.30780000000000002, 0.31059999999999999, 0.31330000000000002], \
            [0.31590000000000001, 0.31859999999999999, 0.32119999999999999, 0.32379999999999998, 0.32640000000000002, 0.32890000000000003, 0.33150000000000002, 0.33400000000000002, 0.33650000000000002, 0.33889999999999998], \
            [0.34129999999999999, 0.34379999999999999, 0.34610000000000002, 0.34849999999999998, 0.3508, 0.35310000000000002, 0.35539999999999999, 0.35770000000000002, 0.3599, 0.36209999999999998], \
            [0.36430000000000001, 0.36649999999999999, 0.36859999999999998, 0.37080000000000002, 0.37290000000000001, 0.37490000000000001, 0.377, 0.379, 0.38100000000000001, 0.38300000000000001], \
            [0.38490000000000002, 0.38690000000000002, 0.38879999999999998, 0.39069999999999999, 0.39250000000000002, 0.39439999999999997, 0.3962, 0.39800000000000002, 0.3997, 0.40150000000000002], \
            [0.4032, 0.40489999999999998, 0.40660000000000002, 0.40820000000000001, 0.40989999999999999, 0.41149999999999998, 0.41310000000000002, 0.41470000000000001, 0.41620000000000001, 0.41770000000000002], \
            [0.41920000000000002, 0.42070000000000002, 0.42220000000000002, 0.42359999999999998, 0.42509999999999998, 0.42649999999999999, 0.4279, 0.42920000000000003, 0.43059999999999998, 0.43190000000000001], \
            [0.43319999999999997, 0.4345, 0.43569999999999998, 0.437, 0.43819999999999998, 0.43940000000000001, 0.44059999999999999, 0.44180000000000003, 0.44290000000000002, 0.44409999999999999], \
            [0.44519999999999998, 0.44629999999999997, 0.44740000000000002, 0.44840000000000002, 0.44950000000000001, 0.45050000000000001, 0.45150000000000001, 0.45250000000000001, 0.45350000000000001, 0.45450000000000002], \
            [0.45540000000000003, 0.45639999999999997, 0.45729999999999998, 0.4582, 0.45910000000000001, 0.45989999999999998, 0.46079999999999999, 0.46160000000000001, 0.46250000000000002, 0.46329999999999999], \
            [0.46410000000000001, 0.46489999999999998, 0.46560000000000001, 0.46639999999999998, 0.46710000000000002, 0.46779999999999999, 0.46860000000000002, 0.46929999999999999, 0.46989999999999998, 0.47060000000000002], \
            [0.4713, 0.47189999999999999, 0.47260000000000002, 0.47320000000000001, 0.4738, 0.47439999999999999, 0.47499999999999998, 0.47560000000000002, 0.47610000000000002, 0.47670000000000001], \
            [0.47720000000000001, 0.4778, 0.4783, 0.4788, 0.4793, 0.4798, 0.4803, 0.48080000000000001, 0.48120000000000002, 0.48170000000000002], \
            [0.48209999999999997, 0.48259999999999997, 0.48299999999999998, 0.4834, 0.48380000000000001, 0.48420000000000002, 0.48459999999999998, 0.48499999999999999, 0.4854, 0.48570000000000002], \
            [0.48609999999999998, 0.4864, 0.48680000000000001, 0.48709999999999998, 0.48749999999999999, 0.48780000000000001, 0.48809999999999998, 0.4884, 0.48870000000000002, 0.48899999999999999], \
            [0.48930000000000001, 0.48959999999999998, 0.48980000000000001, 0.49009999999999998, 0.4904, 0.49059999999999998, 0.4909, 0.49109999999999998, 0.49130000000000001, 0.49159999999999998], \
            [0.49180000000000001, 0.49199999999999999, 0.49220000000000003, 0.49249999999999999, 0.49270000000000003, 0.4929, 0.49309999999999998, 0.49320000000000003, 0.49340000000000001, 0.49359999999999998], \
            [0.49380000000000002, 0.49399999999999999, 0.49409999999999998, 0.49430000000000002, 0.4945, 0.49459999999999998, 0.49480000000000002, 0.49490000000000001, 0.49509999999999998, 0.49519999999999997], \
            [0.49530000000000002, 0.4955, 0.49559999999999998, 0.49569999999999997, 0.49590000000000001, 0.496, 0.49609999999999999, 0.49619999999999997, 0.49630000000000002, 0.49640000000000001], \
            [0.4965, 0.49659999999999999, 0.49669999999999997, 0.49680000000000002, 0.49690000000000001, 0.497, 0.49709999999999999, 0.49719999999999998, 0.49730000000000002, 0.49740000000000001], \
            [0.49740000000000001, 0.4975, 0.49759999999999999, 0.49769999999999998, 0.49769999999999998, 0.49780000000000002, 0.49790000000000001, 0.49790000000000001, 0.498, 0.49809999999999999], \
            [0.49809999999999999, 0.49819999999999998, 0.49819999999999998, 0.49830000000000002, 0.49840000000000001, 0.49840000000000001, 0.4985, 0.4985, 0.49859999999999999, 0.49859999999999999], \
            [0.49869999999999998, 0.49869999999999998, 0.49869999999999998, 0.49880000000000002, 0.49880000000000002, 0.49890000000000001, 0.49890000000000001, 0.49890000000000001, 0.499, 0.499]\
            ]

        alfa = 1 - float(ic)/100.0
        busca = 0.5 - alfa/2

        n_linhas = len(normal)
        n_colunas = len(normal[0])

        inicio = 0
        valor = 0
        fim = n_linhas*n_colunas-1


        while (fim-inicio > 1):
                ind = inicio + (fim - inicio)/2
                tmp = normal[int(ind/n_colunas)][int(ind%n_colunas)]

                if ( tmp < busca ):
                        inicio=ind
                elif (tmp > busca ):
                        fim = ind
                else:
                        inicio = ind
                        fim = ind

        return float(int(inicio/n_colunas))/10.0 +float(int(inicio%n_colunas))/100.0

#print Statistics().getMean([1,2,3,4,5,2,3,4,5,2,2,10]);
#print statistics().getStdev([1,1,1,1]);
#Statistics().loadFile("trace", 95)
